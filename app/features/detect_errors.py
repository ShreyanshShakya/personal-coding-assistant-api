import ast
import subprocess
from utils.groq_client import get_groq_client

def detect_errors(file_path):
    """
    Detect errors in the given Python file using both syntax parsing and pylint.
    
    Args:
        file_path (str): Path to the Python file to analyze.
    
    Returns:
        str: Combined output of syntax error detection and pylint analysis.
    """
    errors = []

    # Step 1: Check for syntax errors using ast
    try:
        with open(file_path, "r") as f:
            code = f.read()
        ast.parse(code)
    except SyntaxError as e:
        return f"Syntax Error: {e.msg} at line {e.lineno}, column {e.offset}."

    # Step 2: Use pylint for additional linting and error detection
    try:
        pylint_result = subprocess.run(
            ["pylint", file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        if pylint_result.stdout.strip():
            errors.append("Pylint Output:\n" + pylint_result.stdout.strip())
    except FileNotFoundError:
        errors.append("Pylint is not installed. Please install it using 'pip install pylint'.")

    # Combine and return all errors
    if errors:
        return "\n".join(errors)
    return "No errors detected."

def detect_errors_from_code(code_snippet):
    """
    Detect syntax errors in the given Python code snippet.
    """
    errors = []

    # Step 1: Check for syntax errors using ast
    try:
        ast.parse(code_snippet)
    except SyntaxError as e:
        errors.append(f"Syntax Error: {e.msg} at line {e.lineno}, column {e.offset}.")

    # Combine and return all errors
    if errors:
        return "\n".join(errors)
    return "No errors detected."


def suggest_fixes(error_report):
    """
    Suggest fixes for the detected errors using the Groq API.
    
    Args:
        error_report (str): The error report generated by pylint.
    
    Returns:
        str: AI-generated suggestions for fixing the errors.
    """
    client = get_groq_client()
    
    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": (
                    "You are an expert Python code reviewer with 7+ years of professional software development "
                    "experience. Your mission is to analyze, review, and suggest fixes for Python code errors, "
                    "focusing on code quality, best practices, efficiency, scalability, readability, and maintainability."
                ),
            },
            {
                "role": "user",
                "content": f"Suggest fixes for the following errors:\n{error_report}",
            }
        ],
        model="llama-3.3-70b-versatile",
        stream=False,
    )
    
    return chat_completion.choices[0].message.content
